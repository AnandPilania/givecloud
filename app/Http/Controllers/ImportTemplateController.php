<?php

namespace Ds\Http\Controllers;

use Ds\Common\TemporaryFile;
use Ds\Domain\Flatfile\Services\Contributions;
use Ds\Domain\Flatfile\Services\FlatfileClient;
use Ds\Models\AccountType;
use Ds\Models\Membership;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Support\Collection;
use Illuminate\Support\Str;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use Symfony\Component\HttpFoundation\BinaryFileResponse;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\ResponseHeaderBag;

class ImportTemplateController extends Controller
{
    public function __invoke(string $name): Response
    {
        $schema = app(FlatfileClient::class)->getSchema($name);

        if ($schema->isEmpty()) {
            throw new ModelNotFoundException;
        }

        $fields = collect(data_get($schema, 'jsonSchema.schema.properties', []));

        $resolved = app('Ds\\Domain\\Flatfile\\Services\\' . Str::studly($name));

        if (method_exists($resolved, 'customFields')) {
            $fields = $fields->merge($resolved->customFields());
        }

        $spreadsheet = new Spreadsheet;
        $spreadsheet->getProperties()
            ->setCreator('Givecloud Support')
            ->setLastModifiedBy('Givecloud Support')
            ->setTitle('Example Import File')
            ->setSubject('Example Import File')
            ->setDescription('Example Import File for Office 2007 XLSX, generated by Givecloud.')
            ->setKeywords('Givecloud')
            ->setCategory('Givecloud');

        $spreadsheet->removeSheetByIndex(0);

        $worksheet1 = new Worksheet($spreadsheet, 'Example Import File');
        $worksheet2 = new Worksheet($spreadsheet, 'Headers Help');

        $spreadsheet->addSheet($worksheet1);
        $spreadsheet->addSheet($worksheet2);

        $worksheet1->fromArray($fields->pluck('label')->toArray());
        $worksheet2->fromArray($this->rows($fields, $schema));

        $headerStyle = [
            'font' => ['bold' => true],
            'fill' => [
                'fillType' => Fill::FILL_SOLID,
                'color' => ['argb' => 'ffe1e1e1'],
            ],
            'borders' => [
                'left' => ['borderStyle' => Border::BORDER_NONE],
                'right' => ['borderStyle' => Border::BORDER_NONE],
                'top' => ['borderStyle' => Border::BORDER_NONE],
                'bottom' => ['borderStyle' => Border::BORDER_MEDIUM],
            ],
        ];

        $coord = $worksheet1->getHighestColumn();

        $worksheet1->getStyle("A1:{$coord}1")->applyFromArray($headerStyle);
        $worksheet2->getStyle('A1:D1')->applyFromArray($headerStyle);
        $worksheet2->getStyle('A:A')->getFont()->setBold(true);

        foreach (range(1, count($fields)) as $index) {
            $worksheet1->getColumnDimensionByColumn($index)->setAutoSize(true);
        }

        foreach (range(1, 4) as $index) {
            $worksheet2->getColumnDimensionByColumn($index)->setAutoSize(true);
        }

        $worksheet1->freezePaneByColumnAndRow(1, 2);
        $worksheet2->freezePaneByColumnAndRow(2, 2);

        $file = (new TemporaryFile)->setExtension('xlsx');

        $writer = new Xlsx($spreadsheet);
        $writer->save($file->getFilename());

        return (new BinaryFileResponse($file))
            ->setContentDisposition(
                ResponseHeaderBag::DISPOSITION_ATTACHMENT,
                sys_get('ds_account_name') . "_{$name}_template.xlsx"
            );
    }

    protected function rows(Collection $fields, Collection $schema): array
    {
        $rows = [['Header', 'Required', 'Description', 'Type']];

        foreach ($fields as $field) {
            $type = '';
            $isRequired = in_array($field['field'], data_get($schema, 'jsonSchema.schema.required'), true);

            if ($field['type'] === 'number') {
                $type = 'Decimal (no formatting)';
            }

            if (Str::contains($field['field'], 'email')) {
                $type = 'Email';
            }

            if (Str::contains($field['field'], 'date')) {
                $type = 'Date (YYYY-MM-DD) or (YYYY-MM-DD HH:MM:SS)';
            }

            if ($field['type'] === 'boolean') {
                $type = 'Boolean (0 or 1)';
            }

            $rows[] = [
                $field['label'],
                $isRequired,
                $field['description'] . $this->additionalInfo($field['field']),
                $type,
            ];
        }

        return $rows;
    }

    public function additionalInfo($field): ?string
    {
        if ($field === 'account_type') {
            return ' (' . AccountType::all()->pluck('name')->implode(', ') . ')';
        }

        if ($field === 'membership_name') {
            return ' (' . Membership::all()->pluck('name')->implode(', ') . ')';
        }

        if ($field === 'form_experience_id') {
            return ' (' . implode(', ', app(Contributions::class)->donationForms()) . ')';
        }

        if ($field === 'product_name') {
            return ' (' . implode(', ', app(Contributions::class)->productCodesAndVariantNames()) . ')';
        }

        if ($field === 'payment_type') {
            return ' (' . implode(', ', [
                'PayPal',
                'Visa',
                'MasterCard',
                'American Express',
                'Discover',
                'Diners Club',
                'GoCardless',
                'Credit Card',
                'Check',
                'Cash',
                'Other',
            ]);
        }

        return null;
    }
}
